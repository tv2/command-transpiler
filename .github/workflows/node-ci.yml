name: Node CI

on:
  push:
    branches:
      - "master"
      - "main"

jobs:
  cache-dependencies:
    runs-on: ubuntu-latest
    outputs:
      dir: ${{ steps.yarn-cache.outputs.dir }}
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Get cache dir
        id: yarn-cache
        run: echo "::set-output name=dir::**/node_modules"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn install

  prebuild:
    runs-on: ubuntu-latest
    needs: cache-dependencies
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ needs.cache-dependencies.outputs.dir }}
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
      - name: Build
        run: yarn build

  test:
    runs-on: ubuntu-latest
    needs: cache-dependencies
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ needs.cache-dependencies.outputs.dir }}
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
      - name: Run tests
        run: yarn test

  validate-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Check dependencies
        run: yarn audit --groups "dependencies" --level moderate

  bump-version:
    runs-on: ubuntu-latest
    needs:
      - prebuild
      - test
      - validate-dependencies
    outputs:
      tag_version: ${{ steps.tag_version.outputs.new_tag || steps.tag_version.outputs.previous_tag }}
      version: ${{ steps.tag_version.outputs.new_version || steps.tag_version.outputs.previous_version }}
      changelog: ${{ steps.tag_version.outputs.changelog }}
      bumped: ${{ steps.tag_version.outputs.new_tag != '' }}
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Configure committer
        run: |
          git config user.name "${{ github.event.pusher.name }}"
          git config user.email "${{ github.event.pusher.email }}"
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false

  build:
    runs-on: ubuntu-latest
    needs:
      - bump-version
      - cache-dependencies
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ needs.cache-dependencies.outputs.dir }}
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: package-artifact
          path: dist

  publish-github-release:
    runs-on: ubuntu-latest
    if: needs.bump-version.outputs.bumped == 'true'
    needs:
      - bump-version
      - build
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: package-artifact
          path: dist
      - name: Compress artifact to zip
        uses: papeloto/action-zip@v1
        with:
          files: dist
          dest: "${{ github.event.repository.name }}.zip"
      - name: Create a GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.bump-version.outputs.tag_version }}
          release_name: Release ${{ needs.bump-version.outputs.tag_version }}
          body: ${{ needs.bump-version.outputs.changelog }}
      - name: Upload zip file to release
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: "${{ github.event.repository.name }}.zip"
          asset_name: "${{ github.event.repository.name }}.zip"
          asset_content_type: application/zip

  npm-token:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      defined: ${{ steps.has-secret.outputs.has-secret }}
    steps:
      - name: Check if has secret
        id: has-secret
        shell: bash
        run: |
          if [ "$SECRET" == "" ]; then
            echo ::set-output name=has-secret::false
          else
            echo ::set-output name=has-secret::true
          fi
        env:
          SECRET: ${{ secrets.NPM_TOKEN }}

  publish-npm-package:
    runs-on: ubuntu-latest
    if: needs.npm-token.outputs.defined == 'true'
    needs:
      - bump-version
      - npm-token
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Configure publisher
        run: |
          git config user.name "${{ github.event.pusher.name }}"
          git config user.email "${{ github.event.pusher.email }}"
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: package-artifact
          path: dist
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"
          registry-url: "https://registry.npmjs.org"
      - name: Publish package
        run: yarn publish --access=public --tag latest --new-version "${{ needs.bump-version.outputs.version }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker-credentials:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      defined: ${{ steps.has-secret.outputs.has-secret }}
    steps:
      - name: Check if has secret
        id: has-secret
        shell: bash
        run: |
          if [ "$USERNAME" == "" ] || [ "$PASSWORD" == "" ]; then
            echo ::set-output name=has-secret::false
          else
            echo ::set-output name=has-secret::true
          fi
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  publish-docker-package:
    runs-on: ubuntu-latest
    if: needs.docker-credentials.outputs.defined == 'true'
    needs:
      - bump-version
      - docker-credentials
    steps:
      - name: Access repository
        uses: actions/checkout@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            tv2media/${{ github.event.repository.name }}:${{ needs.bump-version.outputs.version }}
            tv2media/${{ github.event.repository.name }}:latest

